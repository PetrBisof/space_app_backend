// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  astronaut: (where?: AstronautWhereInput) => Promise<boolean>;
  flight: (where?: FlightWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  astronaut: (where: AstronautWhereUniqueInput) => AstronautNullablePromise;
  astronauts: (args?: {
    where?: AstronautWhereInput;
    orderBy?: AstronautOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Astronaut>;
  astronautsConnection: (args?: {
    where?: AstronautWhereInput;
    orderBy?: AstronautOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AstronautConnectionPromise;
  flight: (where: FlightWhereUniqueInput) => FlightNullablePromise;
  flights: (args?: {
    where?: FlightWhereInput;
    orderBy?: FlightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Flight>;
  flightsConnection: (args?: {
    where?: FlightWhereInput;
    orderBy?: FlightOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FlightConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAstronaut: (data: AstronautCreateInput) => AstronautPromise;
  updateAstronaut: (args: {
    data: AstronautUpdateInput;
    where: AstronautWhereUniqueInput;
  }) => AstronautPromise;
  updateManyAstronauts: (args: {
    data: AstronautUpdateManyMutationInput;
    where?: AstronautWhereInput;
  }) => BatchPayloadPromise;
  upsertAstronaut: (args: {
    where: AstronautWhereUniqueInput;
    create: AstronautCreateInput;
    update: AstronautUpdateInput;
  }) => AstronautPromise;
  deleteAstronaut: (where: AstronautWhereUniqueInput) => AstronautPromise;
  deleteManyAstronauts: (where?: AstronautWhereInput) => BatchPayloadPromise;
  createFlight: (data: FlightCreateInput) => FlightPromise;
  updateFlight: (args: {
    data: FlightUpdateInput;
    where: FlightWhereUniqueInput;
  }) => FlightPromise;
  updateManyFlights: (args: {
    data: FlightUpdateManyMutationInput;
    where?: FlightWhereInput;
  }) => BatchPayloadPromise;
  upsertFlight: (args: {
    where: FlightWhereUniqueInput;
    create: FlightCreateInput;
    update: FlightUpdateInput;
  }) => FlightPromise;
  deleteFlight: (where: FlightWhereUniqueInput) => FlightPromise;
  deleteManyFlights: (where?: FlightWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  astronaut: (
    where?: AstronautSubscriptionWhereInput
  ) => AstronautSubscriptionPayloadSubscription;
  flight: (
    where?: FlightSubscriptionWhereInput
  ) => FlightSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AstronautOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "surname_ASC"
  | "surname_DESC"
  | "experience_ASC"
  | "experience_DESC"
  | "age_ASC"
  | "age_DESC";

export type FlightOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "date_ASC"
  | "date_DESC"
  | "capacity_ASC"
  | "capacity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AstronautWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AstronautWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  experience?: Maybe<String>;
  experience_not?: Maybe<String>;
  experience_in?: Maybe<String[] | String>;
  experience_not_in?: Maybe<String[] | String>;
  experience_lt?: Maybe<String>;
  experience_lte?: Maybe<String>;
  experience_gt?: Maybe<String>;
  experience_gte?: Maybe<String>;
  experience_contains?: Maybe<String>;
  experience_not_contains?: Maybe<String>;
  experience_starts_with?: Maybe<String>;
  experience_not_starts_with?: Maybe<String>;
  experience_ends_with?: Maybe<String>;
  experience_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  flight?: Maybe<FlightWhereInput>;
  AND?: Maybe<AstronautWhereInput[] | AstronautWhereInput>;
  OR?: Maybe<AstronautWhereInput[] | AstronautWhereInput>;
  NOT?: Maybe<AstronautWhereInput[] | AstronautWhereInput>;
}

export interface FlightWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  capacity?: Maybe<Int>;
  capacity_not?: Maybe<Int>;
  capacity_in?: Maybe<Int[] | Int>;
  capacity_not_in?: Maybe<Int[] | Int>;
  capacity_lt?: Maybe<Int>;
  capacity_lte?: Maybe<Int>;
  capacity_gt?: Maybe<Int>;
  capacity_gte?: Maybe<Int>;
  astronaut_every?: Maybe<AstronautWhereInput>;
  astronaut_some?: Maybe<AstronautWhereInput>;
  astronaut_none?: Maybe<AstronautWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FlightWhereInput[] | FlightWhereInput>;
  OR?: Maybe<FlightWhereInput[] | FlightWhereInput>;
  NOT?: Maybe<FlightWhereInput[] | FlightWhereInput>;
}

export type FlightWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AstronautCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  surname: String;
  experience: String;
  age: Int;
  flight?: Maybe<FlightCreateOneWithoutAstronautInput>;
}

export interface FlightCreateOneWithoutAstronautInput {
  create?: Maybe<FlightCreateWithoutAstronautInput>;
  connect?: Maybe<FlightWhereUniqueInput>;
}

export interface FlightCreateWithoutAstronautInput {
  id?: Maybe<ID_Input>;
  name: String;
  date: DateTimeInput;
  capacity?: Maybe<Int>;
}

export interface AstronautUpdateInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  experience?: Maybe<String>;
  age?: Maybe<Int>;
  flight?: Maybe<FlightUpdateOneWithoutAstronautInput>;
}

export interface FlightUpdateOneWithoutAstronautInput {
  create?: Maybe<FlightCreateWithoutAstronautInput>;
  update?: Maybe<FlightUpdateWithoutAstronautDataInput>;
  upsert?: Maybe<FlightUpsertWithoutAstronautInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FlightWhereUniqueInput>;
}

export interface FlightUpdateWithoutAstronautDataInput {
  name?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  capacity?: Maybe<Int>;
}

export interface FlightUpsertWithoutAstronautInput {
  update: FlightUpdateWithoutAstronautDataInput;
  create: FlightCreateWithoutAstronautInput;
}

export interface AstronautUpdateManyMutationInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  experience?: Maybe<String>;
  age?: Maybe<Int>;
}

export interface FlightCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  date: DateTimeInput;
  capacity?: Maybe<Int>;
  astronaut?: Maybe<AstronautCreateManyWithoutFlightInput>;
}

export interface AstronautCreateManyWithoutFlightInput {
  create?: Maybe<
    AstronautCreateWithoutFlightInput[] | AstronautCreateWithoutFlightInput
  >;
  connect?: Maybe<AstronautWhereUniqueInput[] | AstronautWhereUniqueInput>;
}

export interface AstronautCreateWithoutFlightInput {
  id?: Maybe<ID_Input>;
  name: String;
  surname: String;
  experience: String;
  age: Int;
}

export interface FlightUpdateInput {
  name?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  capacity?: Maybe<Int>;
  astronaut?: Maybe<AstronautUpdateManyWithoutFlightInput>;
}

export interface AstronautUpdateManyWithoutFlightInput {
  create?: Maybe<
    AstronautCreateWithoutFlightInput[] | AstronautCreateWithoutFlightInput
  >;
  delete?: Maybe<AstronautWhereUniqueInput[] | AstronautWhereUniqueInput>;
  connect?: Maybe<AstronautWhereUniqueInput[] | AstronautWhereUniqueInput>;
  set?: Maybe<AstronautWhereUniqueInput[] | AstronautWhereUniqueInput>;
  disconnect?: Maybe<AstronautWhereUniqueInput[] | AstronautWhereUniqueInput>;
  update?: Maybe<
    | AstronautUpdateWithWhereUniqueWithoutFlightInput[]
    | AstronautUpdateWithWhereUniqueWithoutFlightInput
  >;
  upsert?: Maybe<
    | AstronautUpsertWithWhereUniqueWithoutFlightInput[]
    | AstronautUpsertWithWhereUniqueWithoutFlightInput
  >;
  deleteMany?: Maybe<AstronautScalarWhereInput[] | AstronautScalarWhereInput>;
  updateMany?: Maybe<
    | AstronautUpdateManyWithWhereNestedInput[]
    | AstronautUpdateManyWithWhereNestedInput
  >;
}

export interface AstronautUpdateWithWhereUniqueWithoutFlightInput {
  where: AstronautWhereUniqueInput;
  data: AstronautUpdateWithoutFlightDataInput;
}

export interface AstronautUpdateWithoutFlightDataInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  experience?: Maybe<String>;
  age?: Maybe<Int>;
}

export interface AstronautUpsertWithWhereUniqueWithoutFlightInput {
  where: AstronautWhereUniqueInput;
  update: AstronautUpdateWithoutFlightDataInput;
  create: AstronautCreateWithoutFlightInput;
}

export interface AstronautScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  experience?: Maybe<String>;
  experience_not?: Maybe<String>;
  experience_in?: Maybe<String[] | String>;
  experience_not_in?: Maybe<String[] | String>;
  experience_lt?: Maybe<String>;
  experience_lte?: Maybe<String>;
  experience_gt?: Maybe<String>;
  experience_gte?: Maybe<String>;
  experience_contains?: Maybe<String>;
  experience_not_contains?: Maybe<String>;
  experience_starts_with?: Maybe<String>;
  experience_not_starts_with?: Maybe<String>;
  experience_ends_with?: Maybe<String>;
  experience_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  AND?: Maybe<AstronautScalarWhereInput[] | AstronautScalarWhereInput>;
  OR?: Maybe<AstronautScalarWhereInput[] | AstronautScalarWhereInput>;
  NOT?: Maybe<AstronautScalarWhereInput[] | AstronautScalarWhereInput>;
}

export interface AstronautUpdateManyWithWhereNestedInput {
  where: AstronautScalarWhereInput;
  data: AstronautUpdateManyDataInput;
}

export interface AstronautUpdateManyDataInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  experience?: Maybe<String>;
  age?: Maybe<Int>;
}

export interface FlightUpdateManyMutationInput {
  name?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  capacity?: Maybe<Int>;
}

export interface AstronautSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AstronautWhereInput>;
  AND?: Maybe<
    AstronautSubscriptionWhereInput[] | AstronautSubscriptionWhereInput
  >;
  OR?: Maybe<
    AstronautSubscriptionWhereInput[] | AstronautSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AstronautSubscriptionWhereInput[] | AstronautSubscriptionWhereInput
  >;
}

export interface FlightSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FlightWhereInput>;
  AND?: Maybe<FlightSubscriptionWhereInput[] | FlightSubscriptionWhereInput>;
  OR?: Maybe<FlightSubscriptionWhereInput[] | FlightSubscriptionWhereInput>;
  NOT?: Maybe<FlightSubscriptionWhereInput[] | FlightSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Astronaut {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  surname: String;
  experience: String;
  age: Int;
}

export interface AstronautPromise extends Promise<Astronaut>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  experience: () => Promise<String>;
  age: () => Promise<Int>;
  flight: <T = FlightPromise>() => T;
}

export interface AstronautSubscription
  extends Promise<AsyncIterator<Astronaut>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  flight: <T = FlightSubscription>() => T;
}

export interface AstronautNullablePromise
  extends Promise<Astronaut | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  experience: () => Promise<String>;
  age: () => Promise<Int>;
  flight: <T = FlightPromise>() => T;
}

export interface Flight {
  id: ID_Output;
  name: String;
  date: DateTimeOutput;
  capacity?: Int;
  createdAt: DateTimeOutput;
}

export interface FlightPromise extends Promise<Flight>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  capacity: () => Promise<Int>;
  astronaut: <T = FragmentableArray<Astronaut>>(args?: {
    where?: AstronautWhereInput;
    orderBy?: AstronautOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FlightSubscription
  extends Promise<AsyncIterator<Flight>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  capacity: () => Promise<AsyncIterator<Int>>;
  astronaut: <T = Promise<AsyncIterator<AstronautSubscription>>>(args?: {
    where?: AstronautWhereInput;
    orderBy?: AstronautOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FlightNullablePromise
  extends Promise<Flight | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  capacity: () => Promise<Int>;
  astronaut: <T = FragmentableArray<Astronaut>>(args?: {
    where?: AstronautWhereInput;
    orderBy?: AstronautOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AstronautConnection {
  pageInfo: PageInfo;
  edges: AstronautEdge[];
}

export interface AstronautConnectionPromise
  extends Promise<AstronautConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AstronautEdge>>() => T;
  aggregate: <T = AggregateAstronautPromise>() => T;
}

export interface AstronautConnectionSubscription
  extends Promise<AsyncIterator<AstronautConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AstronautEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAstronautSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AstronautEdge {
  node: Astronaut;
  cursor: String;
}

export interface AstronautEdgePromise
  extends Promise<AstronautEdge>,
    Fragmentable {
  node: <T = AstronautPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AstronautEdgeSubscription
  extends Promise<AsyncIterator<AstronautEdge>>,
    Fragmentable {
  node: <T = AstronautSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAstronaut {
  count: Int;
}

export interface AggregateAstronautPromise
  extends Promise<AggregateAstronaut>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAstronautSubscription
  extends Promise<AsyncIterator<AggregateAstronaut>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlightConnection {
  pageInfo: PageInfo;
  edges: FlightEdge[];
}

export interface FlightConnectionPromise
  extends Promise<FlightConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlightEdge>>() => T;
  aggregate: <T = AggregateFlightPromise>() => T;
}

export interface FlightConnectionSubscription
  extends Promise<AsyncIterator<FlightConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FlightEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFlightSubscription>() => T;
}

export interface FlightEdge {
  node: Flight;
  cursor: String;
}

export interface FlightEdgePromise extends Promise<FlightEdge>, Fragmentable {
  node: <T = FlightPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlightEdgeSubscription
  extends Promise<AsyncIterator<FlightEdge>>,
    Fragmentable {
  node: <T = FlightSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFlight {
  count: Int;
}

export interface AggregateFlightPromise
  extends Promise<AggregateFlight>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlightSubscription
  extends Promise<AsyncIterator<AggregateFlight>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AstronautSubscriptionPayload {
  mutation: MutationType;
  node: Astronaut;
  updatedFields: String[];
  previousValues: AstronautPreviousValues;
}

export interface AstronautSubscriptionPayloadPromise
  extends Promise<AstronautSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AstronautPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AstronautPreviousValuesPromise>() => T;
}

export interface AstronautSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AstronautSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AstronautSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AstronautPreviousValuesSubscription>() => T;
}

export interface AstronautPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  surname: String;
  experience: String;
  age: Int;
}

export interface AstronautPreviousValuesPromise
  extends Promise<AstronautPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  experience: () => Promise<String>;
  age: () => Promise<Int>;
}

export interface AstronautPreviousValuesSubscription
  extends Promise<AsyncIterator<AstronautPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  experience: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
}

export interface FlightSubscriptionPayload {
  mutation: MutationType;
  node: Flight;
  updatedFields: String[];
  previousValues: FlightPreviousValues;
}

export interface FlightSubscriptionPayloadPromise
  extends Promise<FlightSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlightPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FlightPreviousValuesPromise>() => T;
}

export interface FlightSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FlightSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlightSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FlightPreviousValuesSubscription>() => T;
}

export interface FlightPreviousValues {
  id: ID_Output;
  name: String;
  date: DateTimeOutput;
  capacity?: Int;
  createdAt: DateTimeOutput;
}

export interface FlightPreviousValuesPromise
  extends Promise<FlightPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  capacity: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FlightPreviousValuesSubscription
  extends Promise<AsyncIterator<FlightPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  capacity: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Astronaut",
    embedded: false
  },
  {
    name: "Flight",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
